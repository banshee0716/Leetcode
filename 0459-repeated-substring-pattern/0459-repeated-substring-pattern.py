class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        
        N = len(s)  # 獲取輸入串的長度
        
        # 遍歷輸入串的前一半元素
        for i in range(1, N//2+1):
            # 如果輸入串的長度可以被當前的索引值整除
            if N % i == 0:
                # 嘗試構造一個子串，該子串是輸入串的前i個元素的重複
                # 如果這個子串與輸入串相等，則返回True
                if s[:i]* (N//i) == s:
                    return True
        # 如果所有的子串都不能構成輸入串，則返回False
        return False

"""
這個程式碼的時間複雜度為 O(n^2)，其中 n 是輸入串的長度。在最壞的情況下，我們需要遍歷輸入串的前一半元素，並對每個元素構造一個子串，檢查該子串是否可以構成輸入串。

空間複雜度為 O(n)。我們需要一個輸入串的副本來構造子串，並檢查該子串是否可以構成輸入串。在最壞的情況下，這需要存儲輸入串的所有元素。
"""