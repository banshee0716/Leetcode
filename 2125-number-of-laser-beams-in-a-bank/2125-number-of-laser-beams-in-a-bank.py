from typing import List

class Solution:
    def numberOfBeams(self, bank: List[str]) -> int:
        ans, temp = 0, 0  # 初始化答案和暫存激光束數
        # 遍歷每一層
        for s in bank:
            n = s.count("1")  # 統計當前層的激光束數
            if n == 0:
                continue  # 如果當前層沒有激光束，則繼續下一層
            ans += temp * n  # 計算激光束交叉數並加到總數上
            temp = n  # 更新暫存激光束數
            
        return ans  # 返回激光束交叉的總數

# 使用black格式化後的代碼與上述代碼在格式上已經符合標準

    """
解題思路：

遍歷每一層：
    -遍歷 bank 中的每個字符串（即每一層），統計每層中“1”的數量。

計算激光束交叉數：
    -如果當前層中“1”的數量為0，則繼續遍歷下一層。
    -如果當前層有“1”，則將當前層的激光束數與之前層的激光束數相乘，加到總數 ans 上。
    -更新暫存的激光束數 temp 為當前層的激光束數。

返回結果：
    -遍歷完成後，返回激光束交叉的總數 ans。

時間複雜度分析：
遍歷 bank 的每一層的時間複雜度為 O(n)，其中 n 為 bank 的行數。
在每一層內，計算“1”的數量的時間複雜度為 O(m)，其中 m 為每層的長度。
總的時間複雜度為 O(n * m)。

空間複雜度分析：
這個算法只使用了固定數量的額外空間來存儲變量 ans 和 temp，因此空間複雜度為 O(1)
    """