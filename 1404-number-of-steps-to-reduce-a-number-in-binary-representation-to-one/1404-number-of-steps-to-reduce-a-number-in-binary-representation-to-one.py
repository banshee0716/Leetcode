class Solution:
    def numSteps(self, s: str) -> int:
        ans = 0  # 記錄操作次數
        carry = 0  # 初始進位
        n = len(s)

        # 從最後一位到第一位（不包含最高位），計算需要的操作次數
        for i in range(n-1, 0, -1):
            if int(s[i]) + carry == 1:
                carry = 1  # 當前位為1或有進位，需要將其變為0，操作2次
                ans += 2
            else:
                ans += 1  # 當前位為0且無進位，只需操作1次
        
        # 考慮最後可能的進位
        return ans + carry

    """
解題思路：

－反向遍歷二進位字符串：由於二進位數的每次除以2操作相當於右移一位，所以從字符串的最後一位到第二位反向遍歷，檢查每一位是否需要操作。
－處理奇數和偶數：
    －如果當前位是1（奇數），且存在進位，則需要兩次操作（先+1讓該位變成0，再除以2）。因為1+1=10，在二進位中進位。
    －如果當前位是0（偶數），則只需一次操作（除以2），除非之前有進位，將其變成1。
－結尾的進位：如果最後仍有進位，則需加上這個進位的操作。
    
時間複雜度：O(n)，其中 n 是字符串的長度，因為需要遍歷整個字符串一次。
空間複雜度：O(1)，除了輸入和輸出，只使用了有限的額外空間來存儲進位和計數器。
    """