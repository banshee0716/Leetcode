class Solution:
    def bestClosingTime(self, customers: str) -> int:
        # 初始化 h, m, s 為 0
        h = m = s = 0
        # 遍歷每一個小時和對應的顧客到訪狀態
        for i, ch in enumerate(customers):
            # 更新罰分
            s += (ch == "Y") * 2 - 1
            # 如果當前的罰分大於之前的最小罰分，更新最小罰分和對應的關門時間
            if s > m:
                m, h = s, i + 1
        # 返回最佳的關門時間
        return h

        
"""

我們可以計算商店在某個小時內開業的總利潤，然後選擇利潤最大的時間，而不是計算懲罰。

1. 初始化一個變數 s 來記錄當前的罰分，變數 h 來記錄應該關門的小時數，和變數 m 來記錄最小罰分。

2. 遍歷 customers，對於每一個 'Y'，s 加 2（因為 'Y' 意味著一個顧客來了，但商店關了，罰分會加 1，所以用 s += 2）；對於每一個 'N'，s 減 1（因為 'N' 意味著沒有顧客來，但商店開著，罰分會加 1，所以用 s -= 1）。

3. 如果當前的 s 大於 m，就更新 m 和 h。


時間複雜度：O(n)，其中 n 是 customers 的長度。我們只需要遍歷一次 customers。
空間複雜度：O(1)，因為我們只使用了常數個額外的變量。
"""