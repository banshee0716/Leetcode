class Solution:
    def isReachableAtTime(self, sx: int, sy: int, fx: int, fy: int, t: int) -> bool:
        # 計算所需的最小秒數，即從起始位置到目標位置在x和y方向上的最大差值
        need = max(abs(sx-fx), abs(sy-fy))
        # 如果t大於或等於所需的最小秒數，則可能到達目標位置
        # 如果起始位置和目標位置相同，檢查t是否不等於1
        return t >= need if need else t != 1

    """
解題思路：
1. 計算在x和y方向上所需要的移動距離。考慮到每一步都可以斜對角移動，因此最少的移動次數是x和y之間的最大差值。
2. 如果 t（給定的秒數）大於或等於所需的最小秒數，則可能到達目標位置。
3. 如果起始位置和目標位置相同，那麼唯一不可能的情況是 t 為1，因為這意味著你必須移動但又不能返回。

時間複雜度和空間複雜度：
時間複雜度：O(1)，因為我們只執行了幾個算數操作。
空間複雜度：O(1)，因為我們只使用了固定數量的額外空間。
    """