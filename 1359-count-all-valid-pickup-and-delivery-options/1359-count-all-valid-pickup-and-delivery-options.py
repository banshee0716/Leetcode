MOD = 10**9 + 7

class Solution:
    def countOrders(self, n: int) -> int:
        # 初始化 count 為1，因為只有1個訂單時，只有一種方式
        count = 1
        # 從第二個訂單開始，計算所有可能的訂單順序
        for i in range(2, n+1):
            # 根據上面提到的公式來計算 count
            count = (count * (2 * i -1) * i) % MOD
        # 返回結果
        return count

"""
解題思路：
考慮每個訂單都有 取貨 和 送貨 兩個動作，因此對於 n 個訂單，我們有 2n 個動作要完成。

1. 對於第一個訂單，我們有 2 * 1 - 1 = 1 種方法來插入 送貨 的動作在 取貨 的後面。因此，對於 取貨 和 送貨 這兩個動作，總共有 1 * 2 = 2 種方法。

2. 對於第二個訂單，我們已經有2個動作了（來自第一個訂單），所以有 2 * 2 + 1 = 5 種方法來插入 送貨 的動作在 取貨 的後面。因此，對於這2個訂單的 取貨 和 送貨 這4個動作，總共有 5 * 4 = 20 種方法。

3. 以此類推，我們可以得到公式：count = (count * (2 * i -1) * i) % MOD

時間複雜度：O(n)。我們只遍歷了一次從 2 到 n 的數字。
空間複雜度：O(1)。我們只使用了常數級別的空間。
"""