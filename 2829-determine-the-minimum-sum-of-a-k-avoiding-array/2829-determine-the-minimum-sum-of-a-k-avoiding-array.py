class Solution:
    def minimumSum(self, n: int, k: int) -> int:
        
        if k % 2 == 1:
            additional = k // 2
        else:
            additional = k // 2 - 1
            
        if additional >= n:
            additional = 0
            
        delta = n - (k - additional) + 1
        
        return n * (n + 1) // 2 + additional * delta
        
        
"""

解題思路：

直覺：假設我們有陣列nums = [1, 2, 3, 4, 5, 6, 7, 8]，且k=8。我們知道1+7, 2+6, 3+5都等於8，所以我們應該把5,6,7替換為9,10,11，這三個數字是8之後的數字。所以，我們需要確定的是：
我們應該替換多少數字。
我們應該用哪些數字來替換第一步中確定的數字。

方法：
確定我們應該替換多少數字。這可以通過計算總和為k的配對數來確定。
確定我們應該替換多少才能得到新的數字。這部分比較棘手。我們可以通過計算這些配對中較大部分的最小數字與原始陣列後的第一個數字之間的距離來得到這個數字。

時間複雜度：O(1)。該算法只執行了一系列的常數時間操作。

空間複雜度：O(1)。該算法只使用了固定數量的額外空間。
"""