class Solution:
    def clumsy(self, n: int) -> int:
        # 處理 n 為 1, 2, 3, 4 的特殊情況
        if n == 1:
            return 1
        elif n == 2:
            return 2
        elif n == 3:
            return 6
        elif n == 4:
            return 7
        else:
            # 當 n 能夠被 4 整除，返回 n + 1
            if n % 4 == 0:
                return n + 1
            # 當 n 除以 4 的餘數為 1 或 2，返回 n + 2
            elif n % 4 <= 2:
                return n + 2
            # 當 n 除以 4 的餘數為 3，返回 n - 1
            else:
                return n-1

        
        
        
"""
解題思路：
首先，我們考慮小於或等於 4 的特殊情況。當 n = 1 時，答案是 1。當 n = 2 時，答案是 2 * 1 = 2。當 n = 3 時，答案是 3 * 2 * 1 = 6。當 n = 4 時，答案是 4 * 3 * 2 / 1 = 24 / 1 = 24 但需要減去下一組的 5 所以答案是 19 加上後面的 3, 2, 1 最後結果是 7。

對於大於 4 的 n 值，我們可以發現每四個數字形成一個循環，並且每次循環的結果都會減少。例如，當 n = 8 時，答案是 8 * 7 * 6 / 5 + 4 * 3 * 2 / 1。

基於以上模式，我們可以簡化計算過程。如果 n % 4 == 0，則答案為 n + 1。如果 n % 4 是 1 或 2，則答案為 n + 2。如果 n % 4 == 3，則答案為 n - 1。

時間複雜度:
O(1) - 我們僅僅是根據 n 的值做一些基本的數學運算。
空間複雜度: 
O(1) - 這個方法只使用了一定量的額外空間。
"""