from typing import List

class Solution:
    def getLastMoment(self, n: int, left: List[int], right: List[int]) -> int:
        # 初始化最後時刻為0
        time = 0
        # 遍歷每隻朝左移動的螞蟻
        for pos in left:
            # 更新最後時刻為當前螞蟻到達木板左端的時間
            time = max(time, pos)
        # 遍歷每隻朝右移動的螞蟻
        for pos in right:
            # 更新最後時刻為當前螞蟻到達木板右端的時間
            time = max(time, n - pos)
        
        # 返回所有螞蟻都掉下木板的最後時刻
        return time

        
    
    
    """
給定一個長度為n的木板，木板的左端點為0，右端點為n。有一些螞蟻在木板上，分別朝著左邊和右邊移動。如果兩隻螞蟻相遇，則它們會各自反方向移動。題目要求計算所有螞蟻都掉下木板的最後時刻。

這題的解題思路是基於一個簡單的事實：螞蟻相遇後互相繞過對方繼續走，與螞蟻相遇後掉頭走是一樣的效果。因此，我們可以忽略螞蟻的相遇，只需要考慮每隻螞蟻走到木板邊緣的時間。

解題步驟如下：

1. 初始化一個變量time來記錄最後時刻，初始值為0。
2. 遍歷朝左移動的螞蟻列表left，更新time為time和pos中的最大值，因為朝左的螞蟻從它的起始位置pos直接走到木板的左端點所需的時間就是pos。
3. 遍歷朝右移動的螞蟻列表right，更新time為time和n - pos中的最大值，因為朝右的螞蟻從它的起始位置pos直接走到木板的右端點所需的時間是n - pos。
4. 返回time作為所有螞蟻都掉下木板的最後時刻。

時間複雜度分析：
遍歷一次朝左移動的螞蟻列表和一次朝右移動的螞蟻列表，時間複雜度為O(L + R)，其中L是朝左移動的螞蟻數量，R是朝右移動的螞蟻數量。

空間複雜度分析：
除了給定的螞蟻位置列表之外，只使用了固定的空間來儲存time變量，因此空間複雜度為O(1)。
    """